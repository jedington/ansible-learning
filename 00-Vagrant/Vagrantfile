# -*- mode: ruby -*-
# vi: set ft=ruby :
# This replaces the default Vagrantfile


$control = <<-SCRIPT
echo Provisioning has Started!
date > /etc/vagrant_provisioned_at

declare -A osInfo;
osInfo[/etc/debian_version]='apt'
osInfo[/etc/alpine-release]='apk'
osInfo[/etc/centos-release]='yum'
osInfo[/etc/fedora-release]='dnf'
osInfo[/etc/redhat-release]='dnf'
# Newer RHEL/CentOS versions use 'dnf' from version 7.XX and forward
# Newer RedHat family versions use: '/etc/redhat/release' since 2013~2015
# Cannot guarantee compatibility for any RedHat systems older than 2015

for f in ${!osInfo[@]}
do
    if [[ -f $f ]];then
		pkg_mgr=${osInfo[$f]}
    fi
done

sudo $pkg_mgr update

if [ $pkg_mgr=='apt' ]
then
    sudo apt install software-properties-common -y
    sudo -E apt-add-repository -y 'ppa:deadsnakes/ppa'
    sudo -E apt-add-repository -y 'ppa:ansible/ansible'
    sudo apt autoclean
fi

if [ $pkg_mgr=='yum' ]
then
    sudo yum install https://repo.ius.io/ius-release-el$(rpm -E '%{rhel}').rpm -y
    line='clean_requirements_on_remove=1'
    file='/etc/yum.conf'
    grep -qxF "$line" "$file" || echo "$line" >> "$file"
fi

if [ $pkg_mgr=='dnf' ]
then
    sudo yum install epel-release -y && sudo yum install dnf -y
    line1='metadata_timer_sync=3600'
    line2='max_parallel_downloads=10'
    file='/etc/dnf/dnf.conf'
    grep -qxF "$line1" "$file" || echo "$line1" >> "$file"
    grep -qxF "$line2" "$file" || echo "$line2" >> "$file"
fi

if [ $pkg_mgr=='yum'||'dnf' ]
then
    sudo $pkg_mgr clean packages && sudo $pkg_mgr clean metadata
    sudo $pkg_mgr clean dbcache && sudo $pkg_mgr clean all
    sudo $pkg_mgr makecache
fi

sudo $pkg_mgr update
sudo $pkg_mgr install git python3 ansible -y
sudo $pkg_mgr upgrade && sudo $pkg_mgr autoremove
ansible --version | grep "python version" # optional

while IFS= read -r line ; do
    if ! grep -Fqxe "$line" /etc/hosts ; then
        printf "%s\n" "$line" >> /etc/hosts
    fi
done <<- EOM

	### ###### ###
	# /etc/hosts #
	# ## #### ## #

	10.10.10.10 controller
	10.10.10.11 node1
	10.10.10.12 node2
	10.10.10.13 node3
	10.10.10.21 dev1
	10.10.10.22 dev2
	10.10.10.23 dev3

EOM

while IFS= read -r line ; do
    if ! grep -Fqxe "$line" /etc/ansible/hosts ; then
        printf "%s\n" "$line" >> /etc/ansible/hosts
    fi
done <<- EOM

	### ### ###### ### ###
	# /etc/ansible/hosts #
	# ## ### #### ### ## #

	[controller]
	controller ansible_host=10.10.10.10 ansible_user=vagrant
	#- localhost ansible_host=127.0.0.1 ansible_user=vagrant ansible_connection=local

	[nodes]
	node1 ansible_host=10.10.10.11 ansible_user=vagrant
	node2 ansible_host=10.10.10.12 ansible_user=vagrant
	node3 ansible_host=10.10.10.13 ansible_user=vagrant

	[devs]
	dev1 ansible_host=10.10.10.21 ansible_user=vagrant
	dev2 ansible_host=10.10.10.22 ansible_user=vagrant
	dev3 ansible_host=10.10.10.23 ansible_user=vagrant

EOM

SCRIPT


$remotes = <<-SCRIPT
echo Provisioning has Started!
date > /etc/vagrant_provisioned_at

declare -A osInfo;
osInfo[/etc/debian_version]='apt'
osInfo[/etc/alpine-release]='apk'
osInfo[/etc/centos-release]='yum'
osInfo[/etc/fedora-release]='dnf'
osInfo[/etc/redhat-release]='dnf'
# Newer RHEL/CentOS versions use 'dnf' from version 7.XX and forward
# Newer RedHat family versions use: '/etc/redhat/release' since 2013~2015
# Cannot guarantee compatibility for any RedHat systems older than 2015

for f in ${!osInfo[@]}
do
    if [[ -f $f ]];then
		pkg_mgr=${osInfo[$f]}
    fi
done

sudo $pkg_mgr update

if [ $pkg_mgr=='apt' ]
then
    sudo apt install software-properties-common -y
    sudo -E apt-add-repository -y 'ppa:deadsnakes/ppa'
    sudo -E apt-add-repository -y 'ppa:ansible/ansible'
    sudo apt autoclean
fi

if [ $pkg_mgr=='yum' ]
then
    sudo yum install https://repo.ius.io/ius-release-el$(rpm -E '%{rhel}').rpm -y
    line='clean_requirements_on_remove=1'
    file='/etc/yum.conf'
    grep -qxF "$line" "$file" || echo "$line" >> "$file"
fi

if [ $pkg_mgr=='dnf' ]
then
    sudo yum install epel-release -y && sudo yum install dnf -y
    line1='metadata_timer_sync=3600'
    line2='max_parallel_downloads=10'
    file='/etc/dnf/dnf.conf'
    grep -qxF "$line1" "$file" || echo "$line1" >> "$file"
    grep -qxF "$line2" "$file" || echo "$line2" >> "$file"
fi

if [ $pkg_mgr=='yum'||'dnf' ]
then
    sudo $pkg_mgr clean packages && sudo $pkg_mgr clean metadata
    sudo $pkg_mgr clean dbcache && sudo $pkg_mgr clean all
    sudo $pkg_mgr makecache
fi

sudo $pkg_mgr update
sudo $pkg_mgr install python3 -y
sudo $pkg_mgr upgrade && sudo $pkg_mgr autoremove

SCRIPT


Vagrant.require_version ">= 1.7.0"
Vagrant.configure("2") do |config|
	# ensures that the SSH keys generated are the same across all hosts
	config.ssh.insert_key = false
	#- config.ssh.private_key_path = File.expand_path('~/.vagrant.d/insecure_private_key')
	#- config.vm.network :forwarded_port, guest: 22, host: 2266, id: "ssh"
	#- config.vm.provision "file", source: "~/.vagrant.d/insecure_private_key", destination: "~/.vagrant.d/insecure_private_key"
	config.vm.provider "virtualbox" do |v|
	    v.memory = 512
	    v.cpus = 1
	end
	config.vm.define "controller" do |controller|
		controller.vm.box = "bento/ubuntu-20.04"
		# Feel free to try alt LinuxOS options. 
		# This setup is flexible enough to do that.
		controller.vm.hostname = "controller"
		controller.vm.network :private_network, ip: "10.10.10.10"
		controller.vm.provision :shell, inline: $control
		#- controller.vm.provision :shell, path: 'controller-setup.sh'
	end
	(1..3).each do |i|
		config.vm.define "node#{i}" do |node|
			node.vm.box = "bento/ubuntu-20.04"
			node.vm.hostname = "node#{i}"
			node.vm.network :private_network, ip: "10.10.10.1#{i}"
			node.vm.provision :shell, inline: $remotes
			#- node.vm.provision :shell, path: 'python-remote-setup.sh'
		end
	end
	(1..3).each do |j|
		config.vm.define "dev#{j}" do |dev|
			dev.vm.box = "bento/ubuntu-20.04"
			dev.vm.hostname = "dev#{j}"
			dev.vm.network :private_network, ip: "10.10.10.2#{j}"
			dev.vm.provision :shell, inline: $remotes
			#- dev.vm.provision :shell, path: 'python-remote-setup.sh'
		end
	end
end