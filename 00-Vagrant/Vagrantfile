# -*- mode: ruby -*-
# vi: set ft=ruby :
# This replaces the default Vagrantfile

$remotes = <<-SCRIPT
declare -A osInfo;
osInfo[/etc/debian_version]="apt"
osInfo[/etc/alpine-release]="apk"
osInfo[/etc/centos-release]="yum"
osInfo[/etc/fedora-release]="dnf"
osInfo[/etc/redhat-release]="yum"
# newer versions of RHEL and CentOS will start to use 
# 'dnf' instead of 'yum' from version 8.XX and forward.

for f in ${!osInfo[@]}
do
    if [[ -f $f ]];then
        package_manager=${osInfo[$f]}
    fi
done

sudo $package_manager update
sudo $package_manager upgrade
if [ $package_manager=="apt" ]
then
    sudo apt install software-properties-common -y
    sudo -E apt-add-repository -y 'ppa:deadsnakes/ppa'
    sudo apt update
fi

sudo $package_manager install python3 -y
sudo $package_manager update
SCRIPT


$control = <<-SCRIPT
echo Provisioning has Started!
date > /etc/vagrant_provisioned_at

declare -A osInfo;
osInfo[/etc/debian_version]="apt"
osInfo[/etc/alpine-release]="apk"
osInfo[/etc/centos-release]="yum"
osInfo[/etc/fedora-release]="dnf"
osInfo[/etc/redhat-release]="yum"
# newer versions of RHEL and CentOS will start to use 
# 'dnf' instead of 'yum' from version 8.XX and forward.

for f in ${!osInfo[@]}
do
    if [[ -f $f ]];then
        package_manager=${osInfo[$f]}
    fi
done

sudo $package_manager update
sudo $package_manager upgrade
if [ $package_manager=="apt" ]
then
    sudo apt install software-properties-common -y
    sudo -E apt-add-repository -y 'ppa:deadsnakes/ppa'
    sudo -E apt-add-repository -y 'ppa:ansible/ansible'
    sudo apt update
fi

sudo $package_manager install git -y
sudo $package_manager install python3 -y
sudo $package_manager update

#- sudo $package_manager remove ansible && sudo $package_manager --purge autoremove 
# ^ if older/stale ansible version exists ^
sudo $package_manager install ansible -y
#- ansible --version | grep "python version" # optional

echo "
10.10.10.10 controller
10.10.10.11 node1
10.10.10.12 node2
10.10.10.13 node3
10.10.10.21 dev1
10.10.10.22 dev2
10.10.10.23 dev3
" >> /etc/hosts
SCRIPT


Vagrant.require_version ">= 1.7.0"
Vagrant.configure("2") do |config|
	# ensures that the SSH keys generated are the same across all hosts
	config.ssh.insert_key = false
	config.vm.provider "virtualbox" do |v|
	    v.memory = 512
	    v.cpus = 1
	end
	(1..3).each do |i|
		config.vm.define "node#{i}" do |node|
			node.vm.box = "bento/ubuntu-18.04"
			# Feel free to try alt LinuxOS options
			node.vm.hostname = "node#{i}"
			node.vm.network :private_network, ip: "10.10.10.1#{i}"
			node.vm.provision :shell, inline: $remotes
		end
	end
	(1..3).each do |j|
		config.vm.define "dev#{j}" do |dev|
			dev.vm.box = "bento/ubuntu-18.04"
			# Feel free to try alt LinuxOS options
			dev.vm.hostname = "dev#{j}"
			dev.vm.network :private_network, ip: "10.10.10.2#{j}"
			dev.vm.provision :shell, inline: $remotes
		end
	end
	config.vm.define "controller" do |controller|
		controller.vm.box = "bento/ubuntu-18.04" 
		# Feel free to try alt LinuxOS options. 
		# This setup is flexible enough to do that.
		controller.vm.hostname = "controller"
		controller.vm.network :private_network, ip: "10.10.10.10"
		controller.vm.provision :shell, inline: $control
		controller.vm.provision "file", source: "~/.vagrant.d/insecure_private_key", destination: "~/.vagrant.d/insecure_private_key"
		#- controller.vm.provision :shell, path: 'controller-setup.sh'
	end
end